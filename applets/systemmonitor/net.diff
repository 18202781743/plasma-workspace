diff --git a/applets/CMakeLists.txt b/applets/CMakeLists.txt
index c4d40ac..984e72d 100644
--- a/applets/CMakeLists.txt
+++ b/applets/CMakeLists.txt
@@ -6,6 +6,7 @@ plasma_install_package(analog-clock org.kde.plasma.analogclock)
 plasma_install_package(mediacontroller org.kde.plasma.mediacontroller)
 plasma_install_package(panelspacer org.kde.plasma.panelspacer)
 plasma_install_package(lock_logout org.kde.plasma.lock_logout)
+plasma_install_package(systemmonitor org.kde.plasma.systemmonitor.net)
 
 add_subdirectory(batterymonitor)
 add_subdirectory(devicenotifier)
diff --git a/applets/systemmonitor/Messages.sh b/applets/systemmonitor/Messages.sh
new file mode 100755
index 0000000..2382ed6
--- /dev/null
+++ b/applets/systemmonitor/Messages.sh
@@ -0,0 +1,2 @@
+#! /usr/bin/env bash
+$XGETTEXT `find . -name \*.js -o -name \*.qml -o -name \*.cpp` -o $podir/plasma_applet_org.kde.plasma.systemmonitor.net.pot
diff --git a/applets/systemmonitor/contents/config/config.qml b/applets/systemmonitor/contents/config/config.qml
new file mode 100644
index 0000000..11944e5
--- /dev/null
+++ b/applets/systemmonitor/contents/config/config.qml
@@ -0,0 +1,29 @@
+/*
+ *  Copyright 2013 Bhushan Shah <bhush94@gmail.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  2.010-1301, USA.
+ */
+
+import QtQuick 2.0
+
+import org.kde.plasma.configuration 2.0
+
+ConfigModel {
+    ConfigCategory {
+         name: i18n("Interfaces")
+         icon: "network-workgroup"
+         source: "configGeneral.qml"
+    }
+}
diff --git a/applets/systemmonitor/contents/config/main.xml b/applets/systemmonitor/contents/config/main.xml
new file mode 100644
index 0000000..57a30cb
--- /dev/null
+++ b/applets/systemmonitor/contents/config/main.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<kcfg xmlns="http://www.kde.org/standards/kcfg/1.0"
+      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+      xsi:schemaLocation="http://www.kde.org/standards/kcfg/1.0
+      http://www.kde.org/standards/kcfg/1.0/kcfg.xsd" >
+  <kcfgfile name=""/>
+
+  <group name="General">
+    <entry name="interfaces" type="StringList">
+    </entry>
+  </group>
+
+</kcfg>
diff --git a/applets/systemmonitor/contents/ui/configGeneral.qml b/applets/systemmonitor/contents/ui/configGeneral.qml
new file mode 100644
index 0000000..fd6dfdd
--- /dev/null
+++ b/applets/systemmonitor/contents/ui/configGeneral.qml
@@ -0,0 +1,93 @@
+/*
+ *  Copyright 2013 Bhushan Shah <bhush94@gmail.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  2.010-1301, USA.
+ */
+
+import QtQuick 2.0
+import QtQuick.Controls 1.1 as Controls
+import QtQuick.Layouts 1.1 as Layouts
+
+import org.kde.plasma.core 2.0 as PlasmaCore
+
+
+Item {
+    id: iconsPage
+    width: childrenRect.width
+    height: childrenRect.height
+    implicitWidth: mainColumn.implicitWidth
+    implicitHeight: mainColumn.implicitHeight
+
+    property var cfg_interfaces: []
+
+    PlasmaCore.DataSource {
+        id: smSource
+
+        property var availableNetworks: []
+        //arrays don't signal
+        property int availableNetworksCount: 0
+
+        engine: "systemmonitor"
+
+        Component.onCompleted: {
+            for (var i in smSource.sources) {
+                var source = smSource.sources[i];
+
+                if (source.indexOf("network/interfaces/lo/") !== -1) {
+                    continue;
+                }
+                var match = source.match(/^network\/interfaces\/(\w+)\/transmitter\/data$/);
+                if (match) {
+                    smSource.availableNetworks.push(match[1]);
+                }
+
+                smSource.availableNetworksCount = availableNetworks.length;
+            }
+
+            for (var i = 0; i < repeater.count; ++i) {
+                if (cfg_interfaces.length == 0 || (cfg_interfaces && !cfg_interfaces[0])) {
+                    repeater.itemAt(i).checked = true;
+                } else {
+                    repeater.itemAt(i).checked = cfg_interfaces.indexOf(mainColumn.children[i].text);
+                }
+            }
+        }
+    }
+
+    Layouts.ColumnLayout {
+        id: mainColumn
+
+        Repeater {
+            id: repeater
+            model: smSource.availableNetworksCount
+            Controls.CheckBox {
+                id: checkBox
+                text: smSource.availableNetworks[modelData]
+                onCheckedChanged: {
+                    if (checked) {
+                        if (cfg_interfaces.indexOf(text) == -1) {
+                            cfg_interfaces.push(text);
+                        }
+                    } else {
+                        var idx = cfg_interfaces.indexOf(text);
+                        if (idx !== -1) {
+                            cfg_interfaces.splice(idx, 1);
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/applets/systemmonitor/contents/ui/net.qml b/applets/systemmonitor/contents/ui/net.qml
new file mode 100644
index 0000000..48e5e25
--- /dev/null
+++ b/applets/systemmonitor/contents/ui/net.qml
@@ -0,0 +1,183 @@
+/*
+ *   Copyright 2014 Marco Martin <mart@kde.org>
+ *
+ *
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU Library General Public License as
+ *   published by the Free Software Foundation; either version 2 or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details
+ *
+ *   You should have received a copy of the GNU Library General Public
+ *   License along with this program; if not, write to the
+ *   Free Software Foundation, Inc.,
+ *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+import QtQuick 2.0
+import QtQuick.Layouts 1.1
+import org.kde.plasma.plasmoid 2.0
+import org.kde.plasma.core 2.0 as PlasmaCore
+import org.kde.plasma.components 2.0 as PlasmaComponents
+import org.kde.plasma.extras 2.0 as PlasmaExtras
+
+Item {
+    id: rootItem
+
+    width: units.gridUnit * 20
+    height: units.gridUnit * 10
+    Plasmoid.preferredRepresentation: plasmoid.fullRepresentation
+
+    PlasmaCore.DataSource {
+        id: smSource
+
+        property var availableNetworks: []
+        property var enabledNetworks: []
+        //arrays don't signal
+        property int enabledNetworksCount: 0
+
+        function updateEnabledNetworks() {
+            if (!plasmoid.configuration.interfaces ||
+                (plasmoid.configuration.interfaces &&
+                 !plasmoid.configuration.interfaces[0])) {
+                enabledNetworks = availableNetworks;
+            } else {
+                for (var i in availableNetworks) {
+                    if (plasmoid.configuration.interfaces.indexOf(availableNetworks[i]) != -1) {
+                        enabledNetworks.push(availableNetworks[i]);
+                    }
+                }
+            }
+
+            var newSources = [];
+            for (var i in enabledNetworks) {
+                newSources.push("network/interfaces/" + availableNetworks[i] + "/receiver/data");
+                newSources.push("network/interfaces/" + availableNetworks[i] + "/transmitter/data");
+            }
+            connectedSources = newSources;
+            enabledNetworksCount = enabledNetworks.length;
+        }
+
+        engine: "systemmonitor"
+        interval: 2000
+        onSourceAdded: {
+            if (source.indexOf("network/interfaces/lo/") !== -1) {
+                return;
+            }
+            var match = source.match(/^network\/interfaces\/(\w+)\/transmitter\/data$/);
+            if (match) {
+                availableNetworks.push(match[1]);
+            }
+
+            updateEnabledNetworks();
+        }
+        onSourceRemoved: {
+            if (source.indexOf("network/interfaces/lo/") !== -1) {
+                return;
+            }
+            var match = source.match(/^network\/interfaces\/(\w+)\/transmitter\/data$/);
+            if (match) {
+                var idx = availableNetworks.indexOf(match[1]);
+                if (idx !== -1) {
+                    availableNetworks.splice(idx, 1);
+                }
+            }
+
+            updateEnabledNetworks();
+        }
+    }
+    Connections {
+        target: plasmoid.configuration
+        onInterfacesChanged: {
+            smSource.updateEnabledNetworks();
+        }
+    }
+
+    function cycle(color, degrees) {
+        var min = Math.min(color.r, Math.min(color.g, color.b));
+        var max = Math.max(color.r, Math.max(color.g, color.b));
+        var c = max - min;
+        var h;
+
+        if (c == 0) {
+            h = 0
+        } else if (max == color.r) {
+            h = ((color.g - color.b) / c) % 6;
+        } else if (max == color.g) {
+            h = ((color.b - color.r) / c) + 2;
+        } else if (max == color.b) {
+            h = ((color.r - color.g) / c) + 4;
+        }
+        var hue = (1/6) * h + (degrees/360);
+        var saturation = c / (1 - Math.abs(2 * ((max+min)/2) - 1));
+        var lightness = (max + min)/2;
+
+        return Qt.hsla(hue, saturation, lightness, 1.0);
+    }
+
+    ColumnLayout {
+        anchors.fill: parent
+        anchors.margins: 0
+        Repeater {
+            model: smSource.enabledNetworksCount
+
+            PlasmaExtras.Plotter {
+                id: plotter
+                property string ifName: smSource.enabledNetworks[modelData]
+
+                Layout.fillWidth: true
+                Layout.fillHeight: true
+
+                dataSets: [
+                    PlasmaExtras.PlotData {
+                        label: i18n("Download")
+                        color: theme.highlightColor
+                    },
+                    PlasmaExtras.PlotData {
+                        label: i18n("Upload")
+                        color: cycle(theme.highlightColor, -90)
+                    }
+                ]
+
+                PlasmaComponents.Label {
+                    anchors {
+                        left: parent.left
+                        top: parent.top
+                    }
+                    text: plotter.ifName
+                }
+
+                PlasmaComponents.Label {
+                    id: speedLabel
+                    anchors.centerIn: parent
+                }
+
+                Connections {
+                    target: smSource
+                    onNewData: {
+                        if (sourceName.indexOf("network/interfaces/" + plotter.ifName) != 0) {
+                            return;
+                        }
+                        var rx = smSource.data["network/interfaces/" + plotter.ifName + "/receiver/data"];
+                        var tx = smSource.data["network/interfaces/" + plotter.ifName + "/transmitter/data"];
+
+                        if (rx === undefined || rx.value === undefined ||
+                            tx === undefined || tx.value === undefined) {
+                            return;
+                        }
+
+                        plotter.addSample([rx.value, tx.value]);
+
+                        speedLabel.text = i18n("%1 %2 / %3 %4", rx.value, rx.units,
+                                            tx.value, tx.units);
+                    }
+                }
+            }
+        }
+    }
+
+}
diff --git a/applets/systemmonitor/metadata.desktop b/applets/systemmonitor/metadata.desktop
new file mode 100644
index 0000000..9a73787
--- /dev/null
+++ b/applets/systemmonitor/metadata.desktop
@@ -0,0 +1,159 @@
+[Desktop Entry]
+Encoding=UTF-8
+Name=Network Monitor
+Name[ar]=مرقاب الشبكة
+Name[ast]=Monitor de rede
+Name[bg]=Наблюдение на мрежата
+Name[bs]=nadzor mreže
+Name[ca]=Controlador de la xarxa
+Name[ca@valencia]=Controlador de la xarxa
+Name[cs]=Monitor sítě
+Name[da]=Netværksovervågning
+Name[de]=Netzwerküberwachung
+Name[el]=Επόπτης δικτύου
+Name[en_GB]=Network Monitor
+Name[es]=Monitor de red
+Name[et]=Võrgujälgija
+Name[eu]=Sareko monitorea
+Name[fi]=Verkon käyttö
+Name[fr]=Surveillance du réseau
+Name[ga]=Monatóir an Líonra
+Name[gl]=Vixilante da rede
+Name[gu]=નેટવર્ક મોનિટર
+Name[he]=מוניטור רשת
+Name[hi]=नेटवर्क नरीक्षण
+Name[hr]=Nadzornik mreže
+Name[hu]=Hálózatfigyelő
+Name[ia]=Monitor de Rete
+Name[id]=Monitor Jaringan
+Name[is]=Netkerfisvaktari
+Name[it]=Monitor di rete
+Name[ja]=ネットワークモニタ
+Name[kk]=Желіні бақылау
+Name[km]=ត្រួតពិនិត្យ​បណ្ដាញ
+Name[kn]=ಜಾಲಬಂಧ ಮೇಲ್ವಿಚಾರಕ
+Name[ko]=네트워크 모니터
+Name[lt]=Tinklo stebėjimo priemonė
+Name[lv]=Tīkla monitors
+Name[mr]=संजाळ नियंत्रक
+Name[nb]=Nettverksovervåker
+Name[nds]=Nettwark-Kieker
+Name[nl]=Netwerkmonitor
+Name[nn]=Nettverksovervaking
+Name[pa]=ਨੈੱਟਵਰਕ ਨਿਗਰਾਨ
+Name[pl]=Monitor sieci
+Name[pt]=Monitor da Rede
+Name[pt_BR]=Monitor da rede
+Name[ro]=Monitor de rețea
+Name[ru]=Сетевой монитор
+Name[se]=Fierbmi
+Name[si]=ජාල මොනිටරය
+Name[sk]=Monitor siete
+Name[sl]=Nadzornik omrežja
+Name[sr]=надзор мреже
+Name[sr@ijekavian]=надзор мреже
+Name[sr@ijekavianlatin]=nadzor mreže
+Name[sr@latin]=nadzor mreže
+Name[sv]=Nätverksövervakning
+Name[tg]=Монитори шабака
+Name[th]=ติดตามการใช้งานเครือข่าย
+Name[tr]=Ağ İzleyici
+Name[ug]=تور كۆزەتكۈچ
+Name[uk]=Монітор мережі
+Name[wa]=Corwaitoe del rantoele
+Name[x-test]=xxNetwork Monitorxx
+Name[zh_CN]=网络监视器
+Name[zh_TW]=網路監控
+Comment=A network usage monitor
+Comment[ar]=مرقاب لاستخدام الشبكة
+Comment[ast]=Monitor d'usu de la rede
+Comment[be@latin]=Nazirańnik zaniataści sietki
+Comment[bg]=Наблюдение на изпозлването на мрежата
+Comment[bs]=Nadgledanje upotrebe mreže
+Comment[ca]=Un controlador d'ús de la xarxa
+Comment[ca@valencia]=Un controlador d'ús de la xarxa
+Comment[cs]=Monitor využití sítě
+Comment[csb]=Mònitór brëkòwaniô sécë
+Comment[da]=Overvågning af netværkstrafik
+Comment[de]=Ein Überwachungsmonitor für Netzwerke
+Comment[el]=Ένας επόπτης χρήσης του δικτύου
+Comment[en_GB]=A network usage monitor
+Comment[es]=Monitor de uso de la red
+Comment[et]=Võrgukasutuse jälgija
+Comment[eu]=Sarearen erabileraren monitorea
+Comment[fi]=Näyttää verkon käytön
+Comment[fr]=Surveillance de l'usage réseau
+Comment[fy]=In netwurk brûkme monitor
+Comment[ga]=Monatóir úsáide an líonra
+Comment[gl]=Un vixilante do estado da rede
+Comment[gu]=નેટવર્ક સ્થિતિ દેખરેખ
+Comment[he]=משמש לניטור השימוש ברשת
+Comment[hi]=नेटवर्क उपयोग मॉनीटर
+Comment[hne]=नेटवर्क उपयोग देखइया
+Comment[hr]=Nadzor korištenja mreže
+Comment[hsb]=Monitor, kiž pokazuje wućeženosć syće
+Comment[hu]=Kijelzi a hálózat állapotát
+Comment[ia]=Un monitor de usage de rete
+Comment[id]=Monitor penggunaan jaringan
+Comment[is]=Eftirlit með notkun netsins
+Comment[it]=Indica l'uso della rete
+Comment[ja]=ネットワークの活動を監視します
+Comment[kk]=Желі пайдалануын бақылау
+Comment[km]=កម្មវិធី​ត្រួតពិនិត្យ​ការ​ប្រើ​បណ្ដាញ
+Comment[kn]=ಜಾಲಬಂಧ ಬಳಕೆಯ ಮೇಲ್ವಿಚಾರಕ
+Comment[ko]=네트워크 사용량 모니터
+Comment[ku]=Temaşekerê rewşa torê
+Comment[lt]=Tinklo naudojimo stebėtojas
+Comment[lv]=Tīkla noslogojuma novērotājs
+Comment[mk]=Монитор на користењето на мрежата
+Comment[ml]= ശ്രംഖല ഉപയോഗം നിരീക്ഷകന്‍
+Comment[mr]=संजाळ वापरणी नियंत्रक
+Comment[nb]=En overvåker for nettverksbruk
+Comment[nds]=En Kieker för den Nettwark-Bruuk
+Comment[nl]=Toont het netwerkgebruik
+Comment[nn]=Overvaking av nettverksbruk
+Comment[or]=ଗୋଟିଏ ନେଟୱର୍କ ବ୍ୟବହାର ବିଧି ନିରିକ୍ଷକ
+Comment[pa]=ਇੱਕ ਨੈੱਟਵਰਕ ਵਰਤੋਂ ਮਾਨੀਟਰ
+Comment[pl]=Monitor wykorzystania sieci
+Comment[pt]=Um monitor da utilização da rede
+Comment[pt_BR]=Um monitor de utilização da rede
+Comment[ro]=Monitor de utilizare a rețelei
+Comment[ru]=Монитор сетевой активности
+Comment[si]=ජාල භාවිතය නිරික්‍ෂකය
+Comment[sk]=Monitor využitia siete
+Comment[sl]=Nadzornik uporabe omrežja
+Comment[sr]=Надгледање употребе мреже
+Comment[sr@ijekavian]=Надгледање употребе мреже
+Comment[sr@ijekavianlatin]=Nadgledanje upotrebe mreže
+Comment[sr@latin]=Nadgledanje upotrebe mreže
+Comment[sv]=Övervakning av nätverksanvändning
+Comment[ta]=பிணைய பயன்பாடு நோட்டம்
+Comment[tg]=Состояние сервера Samba
+Comment[th]=ตัวติดตามดูการใช้งานเครือข่าย
+Comment[tr]=Bir ağ kullanımı izleyici
+Comment[ug]=تور ئىشلىتىشنى كۆزەتكۈچ
+Comment[uk]=Монітор використання мережі
+Comment[wa]=On corwaitoe di l' eployaedje del rantoele
+Comment[x-test]=xxA network usage monitorxx
+Comment[zh_CN]=网络利用率监视器
+Comment[zh_TW]=網路使用量監視器
+Type=Service
+Icon=network-workgroup
+
+X-KDE-ServiceTypes=Plasma/Applet
+
+X-Plasma-API=declarativeappletscript
+X-Plasma-MainScript=ui/net.qml
+
+X-Plasma-NotificationArea=true
+X-Plasma-ConfigPlugins=solid-actions,device_automounter_kcm
+
+X-KDE-PluginInfo-Author=Marco Martin
+X-KDE-PluginInfo-Email=mart@kde.org
+X-KDE-PluginInfo-Name=org.kde.plasma.systemmonitor.net
+X-KDE-PluginInfo-Version=1.0
+X-KDE-PluginInfo-Website=
+X-KDE-PluginInfo-Category=System Information
+X-KDE-PluginInfo-Depends=
+X-KDE-PluginInfo-License=GPL
+X-KDE-PluginInfo-EnabledByDefault=true
